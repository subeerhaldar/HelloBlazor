@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IHttpContextAccessor httpContextAccessor
@attribute [Authorize]

<div class="form-group">
    <label for="Date" class="col-sm-3">User: </label>
    @*<input class="form-control col-sm-4" @bind="userInput" placeholder="Enter User" />*@
    @UserName
</div>
<div class="form-group">
    <label for="Date" class="col-sm-3">Message: </label>
    <input class="form-control col-sm-4" @bind="messageInput" size="50" placeholder="Enter Message" />
</div>
<button class="btn btn-outline-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;
    public string UserName;

    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", UserName, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}